#!/usr/bin/env python3
"""
{{ project_name }} - GUI Application
Generated by Copier Template
"""

import sys
import os
from pathlib import Path
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QVBoxLayout, QHBoxLayout, QWidget,
    QPushButton, QLabel, QLineEdit, QFileDialog, QMessageBox,
    QProgressBar, QTextEdit, QCheckBox, QGroupBox, QGridLayout
)
from PyQt5.QtCore import QThread, pyqtSignal, Qt
from PyQt5.QtGui import QFont
import pandas as pd

# Import the main processing functions
from main import worker_function, save_outputs


class WorkerThread(QThread):
    """Worker thread for processing data without blocking UI."""
    
    finished = pyqtSignal(dict)
    error = pyqtSignal(str)
    progress = pyqtSignal(str)
    
    def __init__(self, {% for i in range(num_inputs) %}{{ input_{{ i + 1 }}_identifier }}_path{% if not loop.last %}, {% endif %}{% endfor %}):
        super().__init__()
        {% for i in range(num_inputs) %}
        self.{{ input_{{ i + 1 }}_identifier }}_path = {{ input_{{ i + 1 }}_identifier }}_path
        {% endfor %}
    
    def run(self):
        """Run the worker function in a separate thread."""
        try:
            self.progress.emit("Starting data processing...")
            
            results = worker_function(
                {% for i in range(num_inputs) %}
                self.{{ input_{{ i + 1 }}_identifier }}_path{% if not loop.last %},
                {% endif %}
                {% endfor %}
            )
            
            self.progress.emit("Processing completed successfully!")
            self.finished.emit(results)
            
        except Exception as e:
            self.error.emit(str(e))


class {{ project_name.replace('_', '').title() }}GUI(QMainWindow):
    """Main GUI application for {{ project_name }}."""
    
    def __init__(self):
        super().__init__()
        self.results = None
        self.worker_thread = None
        self.initUI()
    
    def initUI(self):
        """Initialize the user interface."""
        self.setWindowTitle("{{ project_name.replace('_', ' ').title() }}")
        self.setGeometry(100, 100, 800, 600)
        
        # Create central widget and layout
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        
        # Add title
        title_label = QLabel("{{ project_name.replace('_', ' ').title() }}")
        title_font = QFont()
        title_font.setPointSize(16)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignCenter)
        layout.addWidget(title_label)
        
        # Input files section
        input_group = QGroupBox("Input Files")
        input_layout = QGridLayout(input_group)
        
        {% for i in range(num_inputs) %}
        # {{ input_{{ i + 1 }}_placeholder }}
        input_layout.addWidget(QLabel("{{ input_{{ i + 1 }}_placeholder }}:"), {{ i }}, 0)
        self.{{ input_{{ i + 1 }}_identifier }}_path = QLineEdit()
        self.{{ input_{{ i + 1 }}_identifier }}_path.setReadOnly(True)
        input_layout.addWidget(self.{{ input_{{ i + 1 }}_identifier }}_path, {{ i }}, 1)
        
        self.{{ input_{{ i + 1 }}_identifier }}_button = QPushButton("Browse...")
        self.{{ input_{{ i + 1 }}_identifier }}_button.clicked.connect(self.browse_{{ input_{{ i + 1 }}_identifier }})
        input_layout.addWidget(self.{{ input_{{ i + 1 }}_identifier }}_button, {{ i }}, 2)
        
        {% endfor %}
        
        layout.addWidget(input_group)
        
        # UI Controls section
        {% if num_ui_inputs > 0 %}
        ui_group = QGroupBox("Controls")
        ui_layout = QGridLayout(ui_group)
        
        {% for i in range(num_ui_inputs) %}
        {% if ui_input_{{ i + 1 }}_type == "File Selection" %}
        # {{ ui_input_{{ i + 1 }}_label }} (File Selection)
        ui_layout.addWidget(QLabel("{{ ui_input_{{ i + 1 }}_label }}:"), {{ i }}, 0)
        self.{{ ui_input_{{ i + 1 }}_variable }}_path = QLineEdit()
        self.{{ ui_input_{{ i + 1 }}_variable }}_path.setReadOnly(True)
        ui_layout.addWidget(self.{{ ui_input_{{ i + 1 }}_variable }}_path, {{ i }}, 1)
        
        self.{{ ui_input_{{ i + 1 }}_variable }}_button = QPushButton("Browse...")
        self.{{ ui_input_{{ i + 1 }}_variable }}_button.clicked.connect(self.browse_{{ ui_input_{{ i + 1 }}_variable }}_file)
        ui_layout.addWidget(self.{{ ui_input_{{ i + 1 }}_variable }}_button, {{ i }}, 2)
        
        {% elif ui_input_{{ i + 1 }}_type == "Folder Selection" %}
        # {{ ui_input_{{ i + 1 }}_label }} (Folder Selection)
        ui_layout.addWidget(QLabel("{{ ui_input_{{ i + 1 }}_label }}:"), {{ i }}, 0)
        self.{{ ui_input_{{ i + 1 }}_variable }}_path = QLineEdit()
        self.{{ ui_input_{{ i + 1 }}_variable }}_path.setReadOnly(True)
        ui_layout.addWidget(self.{{ ui_input_{{ i + 1 }}_variable }}_path, {{ i }}, 1)
        
        self.{{ ui_input_{{ i + 1 }}_variable }}_button = QPushButton("Browse...")
        self.{{ ui_input_{{ i + 1 }}_variable }}_button.clicked.connect(self.browse_{{ ui_input_{{ i + 1 }}_variable }}_folder)
        ui_layout.addWidget(self.{{ ui_input_{{ i + 1 }}_variable }}_button, {{ i }}, 2)
        
        {% elif ui_input_{{ i + 1 }}_type == "Checkbox" %}
        # {{ ui_input_{{ i + 1 }}_label }} (Checkbox)
        self.{{ ui_input_{{ i + 1 }}_variable }}_checkbox = QCheckBox("{{ ui_input_{{ i + 1 }}_label }}")
        ui_layout.addWidget(self.{{ ui_input_{{ i + 1 }}_variable }}_checkbox, {{ i }}, 0, 1, 3)
        
        {% endif %}
        {% endfor %}
        
        layout.addWidget(ui_group)
        {% endif %}
        
        # Process button
        self.process_button = QPushButton("Process Data")
        self.process_button.clicked.connect(self.process_data)
        self.process_button.setMinimumHeight(40)
        layout.addWidget(self.process_button)
        
        # Progress bar
        self.progress_bar = QProgressBar()
        self.progress_bar.setVisible(False)
        layout.addWidget(self.progress_bar)
        
        # Status text
        self.status_text = QTextEdit()
        self.status_text.setMaximumHeight(150)
        self.status_text.setReadOnly(True)
        layout.addWidget(self.status_text)
        
        # Save results button
        self.save_button = QPushButton("Save Results")
        self.save_button.clicked.connect(self.save_results)
        self.save_button.setEnabled(False)
        layout.addWidget(self.save_button)
    
    {% for i in range(num_inputs) %}
    def browse_{{ input_{{ i + 1 }}_identifier }}(self):
        """Browse for {{ input_{{ i + 1 }}_placeholder }} file."""
        {% if input_{{ i + 1 }}_format == "CSV" %}
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "Select {{ input_{{ i + 1 }}_placeholder }}", 
            "", 
            "CSV Files (*.csv);;All Files (*)"
        )
        {% else %}
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "Select {{ input_{{ i + 1 }}_placeholder }}", 
            "", 
            "Excel Files (*.xlsx *.xls);;All Files (*)"
        )
        {% endif %}
        
        if file_path:
            self.{{ input_{{ i + 1 }}_identifier }}_path.setText(file_path)
    
    {% endfor %}
    
    {% for i in range(num_ui_inputs) %}
    {% if ui_input_{{ i + 1 }}_type == "File Selection" %}
    def browse_{{ ui_input_{{ i + 1 }}_variable }}_file(self):
        """Browse for {{ ui_input_{{ i + 1 }}_label }} file."""
        file_path, _ = QFileDialog.getOpenFileName(
            self, 
            "Select {{ ui_input_{{ i + 1 }}_label }}", 
            "", 
            "All Files (*)"
        )
        
        if file_path:
            self.{{ ui_input_{{ i + 1 }}_variable }}_path.setText(file_path)
    
    {% elif ui_input_{{ i + 1 }}_type == "Folder Selection" %}
    def browse_{{ ui_input_{{ i + 1 }}_variable }}_folder(self):
        """Browse for {{ ui_input_{{ i + 1 }}_label }} folder."""
        folder_path = QFileDialog.getExistingDirectory(
            self, 
            "Select {{ ui_input_{{ i + 1 }}_label }}"
        )
        
        if folder_path:
            self.{{ ui_input_{{ i + 1 }}_variable }}_path.setText(folder_path)
    
    {% endif %}
    {% endfor %}
    
    def validate_inputs(self):
        """Validate that all required inputs are provided."""
        {% for i in range(num_inputs) %}
        if not self.{{ input_{{ i + 1 }}_identifier }}_path.text().strip():
            QMessageBox.warning(self, "Warning", "Please select {{ input_{{ i + 1 }}_placeholder }}.")
            return False
        
        if not Path(self.{{ input_{{ i + 1 }}_identifier }}_path.text()).exists():
            QMessageBox.warning(self, "Warning", "{{ input_{{ i + 1 }}_placeholder }} file does not exist.")
            return False
        
        {% endfor %}
        
        return True
    
    def process_data(self):
        """Process the data using the worker thread."""
        if not self.validate_inputs():
            return
        
        # Disable the process button and show progress
        self.process_button.setEnabled(False)
        self.progress_bar.setVisible(True)
        self.progress_bar.setRange(0, 0)  # Indeterminate progress
        self.status_text.clear()
        self.status_text.append("Starting data processing...")
        
        # Create and start worker thread
        self.worker_thread = WorkerThread(
            {% for i in range(num_inputs) %}
            self.{{ input_{{ i + 1 }}_identifier }}_path.text(){% if not loop.last %},
            {% endif %}
            {% endfor %}
        )
        
        self.worker_thread.finished.connect(self.on_processing_finished)
        self.worker_thread.error.connect(self.on_processing_error)
        self.worker_thread.progress.connect(self.on_progress_update)
        self.worker_thread.start()
    
    def on_processing_finished(self, results):
        """Handle successful processing completion."""
        self.results = results
        self.progress_bar.setVisible(False)
        self.process_button.setEnabled(True)
        self.save_button.setEnabled(True)
        
        self.status_text.append("Processing completed successfully!")
        self.status_text.append(f"Generated {len(results)} result datasets.")
        
        QMessageBox.information(self, "Success", "Data processing completed successfully!")
    
    def on_processing_error(self, error_message):
        """Handle processing errors."""
        self.progress_bar.setVisible(False)
        self.process_button.setEnabled(True)
        
        self.status_text.append(f"Error: {error_message}")
        
        QMessageBox.critical(self, "Error", f"Processing failed:\n{error_message}")
    
    def on_progress_update(self, message):
        """Handle progress updates."""
        self.status_text.append(message)
        # Auto-scroll to bottom
        scrollbar = self.status_text.verticalScrollBar()
        scrollbar.setValue(scrollbar.maximum())
    
    def save_results(self):
        """Save the processing results."""
        if not self.results:
            QMessageBox.warning(self, "Warning", "No results to save. Please process data first.")
            return
        
        # Ask user for output directory
        output_dir = QFileDialog.getExistingDirectory(
            self, 
            "Select Output Directory"
        )
        
        if not output_dir:
            return
        
        try:
            save_outputs(self.results, output_dir)
            self.status_text.append(f"Results saved to: {output_dir}")
            QMessageBox.information(self, "Success", f"Results saved successfully to:\n{output_dir}")
        except Exception as e:
            error_msg = f"Failed to save results: {str(e)}"
            self.status_text.append(error_msg)
            QMessageBox.critical(self, "Error", error_msg)


def main():
    """Main function to run the GUI application."""
    app = QApplication(sys.argv)
    
    # Set application properties
    app.setApplicationName("{{ project_name.replace('_', ' ').title() }}")
    app.setApplicationVersion("1.0.0")
    
    # Create and show main window
    window = {{ project_name.replace('_', '').title() }}GUI()
    window.show()
    
    sys.exit(app.exec_())


if __name__ == "__main__":
    main()
